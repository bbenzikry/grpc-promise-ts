{"version":3,"file":"index.js","sources":["../src/lib/unary.ts","../src/lib/convertToPromiseClient.ts","../src/index.ts"],"sourcesContent":["import {\n  CallOptions,\n  Client,\n  ClientUnaryCall,\n  Metadata,\n  MethodDefinition,\n} from \"grpc\";\n\nexport interface TUnaryResult<TResponse> extends Promise<TResponse> {\n  // this promise will reject with a grpc.ServiceError\n  getUnaryCall: () => ClientUnaryCall;\n}\n\nexport type TUnaryRpc<TRequest, TResponse> = (\n  request: TRequest,\n  metadata?: Metadata,\n  options?: Partial<CallOptions>\n) => TUnaryResult<TResponse>;\n\nexport const promisfyUnaryRpc = <TRequest, TResponse>(\n  rpc: MethodDefinition<TRequest, TResponse> & Function,\n  client: Client\n): TUnaryRpc<TRequest, TResponse> => {\n  const originalRpc = rpc;\n  return <TRequest, TResponse>(\n    request: TRequest,\n    metadata: Metadata = new Metadata(),\n    options: Partial<CallOptions> = {}\n  ) => {\n    let unaryCall: ClientUnaryCall;\n    const result: Partial<TUnaryResult<TResponse>> = new Promise<TResponse>(\n      (resolve, reject) => {\n        unaryCall = originalRpc.call(\n          client,\n          request,\n          metadata,\n          options,\n          (e, r) => {\n            if (e) {\n              reject(e);\n              return;\n            }\n            resolve(r);\n          }\n        );\n      }\n    );\n\n    result.getUnaryCall = () => unaryCall;\n    return result as TUnaryResult<TResponse>;\n  };\n};\n","import {\n  CallOptions,\n  Client,\n  ClientDuplexStream,\n  Metadata,\n  MethodDefinition,\n} from \"grpc\";\n\nimport { promisfyUnaryRpc } from \"./unary\";\n\nenum RpcType {\n  UNARY,\n  SERVER_STREAMING,\n  CLIENT_STREAMING,\n  BIDIRECTIONAL,\n}\n\n/**\n * Creates a gRPC client which extends the grpc.Client input\n * by changing the RPC implemenations to return a promise instead of using\n * a callback to get the response.\n *\n * This function has no side effects (it doesn't modify the RPC passed in).\n */\nconst convertToPromiseClient = function <TPromiseClient extends Client>(\n  client: Client\n): TPromiseClient {\n  const result = Object.create(client) as TPromiseClient;\n  Object.keys(Object.getPrototypeOf(client)).forEach(\n    <TRequest, TResponse>(methodName) => {\n      const methodDefinition: MethodDefinition<TRequest, TResponse> & Function =\n        client[methodName];\n      if (\n        methodDefinition.requestStream === undefined &&\n        methodDefinition.responseStream === undefined\n      ) {\n        // actual grpc methods will have both of these populated\n        return;\n      }\n\n      let rpcType: RpcType;\n      switch (methodDefinition.requestStream) {\n        case true:\n          switch (methodDefinition.responseStream) {\n            case true:\n              rpcType = RpcType.BIDIRECTIONAL;\n              break;\n            case false:\n              rpcType = RpcType.CLIENT_STREAMING;\n              break;\n          }\n          break;\n        case false:\n          switch (methodDefinition.responseStream) {\n            case true:\n              rpcType = RpcType.SERVER_STREAMING;\n              break;\n            case false:\n              rpcType = RpcType.UNARY;\n              break;\n          }\n          break;\n        default:\n          throw new Error(\"unreachable\");\n      }\n\n      switch (rpcType) {\n        case RpcType.UNARY:\n          result[methodName] = promisfyUnaryRpc(methodDefinition, client);\n          break;\n        case RpcType.BIDIRECTIONAL:\n          result[methodName] = <TRequest, TResponse>(\n            metadata: Metadata = new Metadata(),\n            options: Partial<CallOptions> = {}\n          ): ClientDuplexStream<TRequest, TResponse> =>\n            methodDefinition.call(client, metadata, options);\n          break;\n        default:\n          throw new Error(\"Readable/Writeable streams not yet implememnted\");\n      }\n    }\n  );\n  return result;\n};\n\nexport default convertToPromiseClient;\n","export * from \"./lib/unary\";\n\nimport _convertToPromiseClient from \"./lib/convertToPromiseClient\";\n\nexport const convertToPromiseClient = _convertToPromiseClient;\n"],"names":["Metadata","convertToPromiseClient","_convertToPromiseClient"],"mappings":";;;;;;MAmBa,gBAAgB,GAAG,CAC9B,GAAqD,EACrD,MAAc;IAEd,MAAM,WAAW,GAAG,GAAG,CAAC;IACxB,OAAO,CACL,OAAiB,EACjB,WAAqB,IAAIA,aAAQ,EAAE,EACnC,UAAgC,EAAE;QAElC,IAAI,SAA0B,CAAC;QAC/B,MAAM,MAAM,GAAqC,IAAI,OAAO,CAC1D,CAAC,OAAO,EAAE,MAAM;YACd,SAAS,GAAG,WAAW,CAAC,IAAI,CAC1B,MAAM,EACN,OAAO,EACP,QAAQ,EACR,OAAO,EACP,CAAC,CAAC,EAAE,CAAC;gBACH,IAAI,CAAC,EAAE;oBACL,MAAM,CAAC,CAAC,CAAC,CAAC;oBACV,OAAO;iBACR;gBACD,OAAO,CAAC,CAAC,CAAC,CAAC;aACZ,CACF,CAAC;SACH,CACF,CAAC;QAEF,MAAM,CAAC,YAAY,GAAG,MAAM,SAAS,CAAC;QACtC,OAAO,MAAiC,CAAC;KAC1C,CAAC;AACJ;;ACzCA,IAAK,OAKJ;AALD,WAAK,OAAO;IACV,uCAAK,CAAA;IACL,6DAAgB,CAAA;IAChB,6DAAgB,CAAA;IAChB,uDAAa,CAAA;AACf,CAAC,EALI,OAAO,KAAP,OAAO,QAKX;AAED;;;;;;;AAOA,MAAM,sBAAsB,GAAG,UAC7B,MAAc;IAEd,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAmB,CAAC;IACvD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAChD,CAAsB,UAAU;QAC9B,MAAM,gBAAgB,GACpB,MAAM,CAAC,UAAU,CAAC,CAAC;QACrB,IACE,gBAAgB,CAAC,aAAa,KAAK,SAAS;YAC5C,gBAAgB,CAAC,cAAc,KAAK,SAAS,EAC7C;;YAEA,OAAO;SACR;QAED,IAAI,OAAgB,CAAC;QACrB,QAAQ,gBAAgB,CAAC,aAAa;YACpC,KAAK,IAAI;gBACP,QAAQ,gBAAgB,CAAC,cAAc;oBACrC,KAAK,IAAI;wBACP,OAAO,GAAG,OAAO,CAAC,aAAa,CAAC;wBAChC,MAAM;oBACR,KAAK,KAAK;wBACR,OAAO,GAAG,OAAO,CAAC,gBAAgB,CAAC;wBACnC,MAAM;iBACT;gBACD,MAAM;YACR,KAAK,KAAK;gBACR,QAAQ,gBAAgB,CAAC,cAAc;oBACrC,KAAK,IAAI;wBACP,OAAO,GAAG,OAAO,CAAC,gBAAgB,CAAC;wBACnC,MAAM;oBACR,KAAK,KAAK;wBACR,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC;wBACxB,MAAM;iBACT;gBACD,MAAM;YACR;gBACE,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;SAClC;QAED,QAAQ,OAAO;YACb,KAAK,OAAO,CAAC,KAAK;gBAChB,MAAM,CAAC,UAAU,CAAC,GAAG,gBAAgB,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;gBAChE,MAAM;YACR,KAAK,OAAO,CAAC,aAAa;gBACxB,MAAM,CAAC,UAAU,CAAC,GAAG,CACnB,WAAqB,IAAIA,aAAQ,EAAE,EACnC,UAAgC,EAAE,KAElC,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;gBACnD,MAAM;YACR;gBACE,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;SACtE;KACF,CACF,CAAC;IACF,OAAO,MAAM,CAAC;AAChB,CAAC;;MC/EYC,wBAAsB,GAAGC;;;;;"}